#lang racket

(require racket/trace)

; 次の手続きはAckermann関数という数学関数を計算する.
(define (A x y)
  (cond ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1)
                 (A x (- y 1))))))

(trace A)
; 次の式の値は何か.
; (A 1 10)
; ; (A 0 (A 1 9))
; ; (A 0 (A 0 9)
; ; (A 0 (* 2 9))
; ; (A 0 18)
; ; (* 2 18)

; (A 1 10)

; (A 0
;   (A 1 9))

; (A 0
;   (A 0
;     (A 1 8)))

; (A 0
;   (A 0
;     (A 0
;       (A 1 7))))
; ; ...  (A 1 0)

; (A 0
;   (A 0
;     (A 0
;       (A 0
;         (A 0
;           (A 0
;             (A 0
;               (A 0
;                 (A 0
;                   (A 1 1))))))))))

; (A 2 4)
(A 3 3)
; Aを上で定義した手続きとして, 次の手続きを考える.
; (define (f n) (A 0 n))

; (define (h n) (A 2 n))
; (define (k n) (* 5 n n))
; 正の整数nに対して手続きf, gおよびhが計算する関数の簡潔な数学的定義を述べよ.
; 例えば(k n)は5n2を計算する.
